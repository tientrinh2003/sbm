import Sidebar from '@/components/Sidebar';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/db';
import { redirect } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import MeasurementCard from '@/components/MeasurementCard';
import ChartBP from '@/components/ChartBP';

export default async function PatientDashboard() {
  const session = await getServerSession(authOptions);
  const role = (session as any)?.role;
  
  if (!session) redirect('/login');
  if (role !== 'PATIENT') redirect('/forbidden');

  const user = await prisma.user.findUnique({
    where: { email: session.user?.email || '' }
  });

  const latest = user ? await prisma.measurement.findFirst({
    where: { userId: user.id },
    orderBy: { takenAt: 'desc' }
  }) : null;

  const count = user ? await prisma.measurement.count({
    where: { userId: user.id }
  }) : 0;

  const recentMeasurements = user ? await prisma.measurement.findMany({
    where: { userId: user.id },
    orderBy: { takenAt: 'desc' },
    take: 5
  }) : [];

  // Chart data for last 30 days
  const chartData = user ? await prisma.measurement.findMany({
    where: { 
      userId: user.id,
      takenAt: {
        gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // 30 days
      }
    },
    orderBy: { takenAt: 'asc' },
    take: 20
  }) : [];

  // Calculate averages for the last 7 days
  const last7Days = user ? await prisma.measurement.findMany({
    where: { 
      userId: user.id,
      takenAt: {
        gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 days
      }
    }
  }) : [];

  const avg7Days = last7Days.length > 0 ? {
    sys: Math.round(last7Days.reduce((sum, m) => sum + m.sys, 0) / last7Days.length),
    dia: Math.round(last7Days.reduce((sum, m) => sum + m.dia, 0) / last7Days.length),
    pulse: Math.round(last7Days.reduce((sum, m) => sum + m.pulse, 0) / last7Days.length)
  } : null;

  // Risk assessment
  const getRiskLevel = (sys: number, dia: number) => {
    if (sys >= 180 || dia >= 110) return { level: 'Kh·∫©n c·∫•p', color: 'text-red-600', bgColor: 'bg-red-50' };
    if (sys >= 140 || dia >= 90) return { level: 'Cao', color: 'text-red-500', bgColor: 'bg-red-50' };
    if (sys >= 130 || dia >= 80) return { level: 'Giai ƒëo·∫°n 1', color: 'text-orange-500', bgColor: 'bg-orange-50' };
    if (sys >= 120) return { level: 'TƒÉng cao', color: 'text-yellow-600', bgColor: 'bg-yellow-50' };
    return { level: 'B√¨nh th∆∞·ªùng', color: 'text-green-600', bgColor: 'bg-green-50' };
  };

  const currentRisk = latest ? getRiskLevel(latest.sys, latest.dia) : null;

  // Format chart data
  const formattedChartData = chartData.map(m => ({
    takenAt: new Date(m.takenAt).toLocaleDateString('vi-VN', { month: 'short', day: 'numeric' }),
    sys: m.sys,
    dia: m.dia,
    pulse: m.pulse
  }));

  return (
    <div className="grid gap-6 md:grid-cols-[16rem_1fr]">
      <Sidebar role="PATIENT" />
      <div className="space-y-6">
        {/* Welcome Section */}
        <div className="card">
          <h1 className="text-xl font-semibold text-gray-900">
            Ch√†o m·ª´ng, {user?.name || session.user?.name}
          </h1>
          <p className="text-gray-600 mt-1">
            Theo d√µi v√† qu·∫£n l√Ω s·ª©c kh·ªèe huy·∫øt √°p c·ªßa b·∫°n
          </p>
        </div>

        {/* Enhanced Stats */}
        <div className="grid gap-4 md:grid-cols-4">
          <div className="card">
            <div className="text-sm text-gray-600">T·ªïng s·ªë l·∫ßn ƒëo</div>
            <div className="text-2xl font-bold text-blue-600">{count}</div>
            <div className="text-xs text-gray-500 mt-1">
              {last7Days.length} l·∫ßn trong 7 ng√†y qua
            </div>
          </div>
          
          <div className="card">
            <div className="text-sm text-gray-600">L·∫ßn ƒëo g·∫ßn nh·∫•t</div>
            {latest ? (
              <div className="space-y-1">
                <div className="text-lg font-semibold">
                  {latest.sys}/{latest.dia} mmHg
                </div>
                <div className="text-xs text-gray-500">
                  {new Date(latest.takenAt).toLocaleDateString('vi-VN')}
                </div>
              </div>
            ) : (
              <div className="text-gray-400">Ch∆∞a c√≥ d·ªØ li·ªáu</div>
            )}
          </div>

          <div className="card">
            <div className="text-sm text-gray-600">Trung b√¨nh 7 ng√†y</div>
            {avg7Days ? (
              <div className="space-y-1">
                <div className="text-lg font-semibold">
                  {avg7Days.sys}/{avg7Days.dia} mmHg
                </div>
                <div className="text-xs text-gray-500">
                  Nh·ªãp tim: {avg7Days.pulse} bpm
                </div>
              </div>
            ) : (
              <div className="text-gray-400">Ch∆∞a ƒë·ªß d·ªØ li·ªáu</div>
            )}
          </div>

          <div className="card">
            <div className="text-sm text-gray-600">M·ª©c ƒë·ªô nguy c∆°</div>
            {currentRisk ? (
              <div className={`inline-block px-2 py-1 rounded-full text-sm font-semibold ${currentRisk.bgColor} ${currentRisk.color}`}>
                {currentRisk.level}
              </div>
            ) : (
              <div className="text-gray-400">Ch∆∞a c√≥ d·ªØ li·ªáu</div>
            )}
          </div>
        </div>

        {/* Quick Actions */}
        <div className="card">
          <h2 className="text-lg font-semibold mb-4">Thao t√°c nhanh</h2>
          <div className="flex gap-3 flex-wrap">
            <Link href="/patient/monitoring">
              <Button className="bg-blue-600 hover:bg-blue-700">
                üìä ƒêo huy·∫øt √°p ngay
              </Button>
            </Link>
            <Link href="/patient/chat">
              <Button variant="outline">
                ÔøΩ H·ªèi AI Assistant
              </Button>
            </Link>
            <Button variant="outline">
              üìã B√°o c√°o s·ª©c kh·ªèe
            </Button>
          </div>
        </div>

        {/* Blood Pressure Chart */}
        {formattedChartData.length > 0 && (
          <div className="card">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold">üìà Xu h∆∞·ªõng huy·∫øt √°p (30 ng√†y)</h2>
              <div className="text-sm text-gray-500">
                {formattedChartData.length} l·∫ßn ƒëo
              </div>
            </div>
            <ChartBP data={formattedChartData} />
            <div className="mt-3 grid grid-cols-3 gap-4 text-center text-sm">
              <div>
                <div className="text-red-500 font-semibold">‚óè SYS</div>
                <div className="text-gray-600">T√¢m thu</div>
              </div>
              <div>
                <div className="text-blue-500 font-semibold">‚óè DIA</div>
                <div className="text-gray-600">T√¢m tr∆∞∆°ng</div>
              </div>
              <div>
                <div className="text-green-500 font-semibold">‚óè Pulse</div>
                <div className="text-gray-600">Nh·ªãp tim</div>
              </div>
            </div>
          </div>
        )}

        {/* Recent Measurements */}
        {recentMeasurements.length > 0 && (
          <div className="card">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold">K·∫øt qu·∫£ g·∫ßn ƒë√¢y</h2>
              <Link href="/patient/history">
                <Button variant="ghost" size="sm">
                  Xem t·∫•t c·∫£ ‚Üí
                </Button>
              </Link>
            </div>
            <div className="space-y-3">
              {recentMeasurements.map((measurement) => (
                <div key={measurement.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-semibold">
                      {measurement.sys}/{measurement.dia} mmHg
                    </div>
                    <div className="text-sm text-gray-600">
                      Nh·ªãp tim: {measurement.pulse} bpm
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-sm text-gray-500">
                      {new Date(measurement.takenAt).toLocaleDateString('vi-VN')}
                    </div>
                    <div className="text-xs text-gray-400">
                      {measurement.method === 'BLUETOOTH' ? 'üì± Bluetooth' : '‚úã Th·ªß c√¥ng'}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Personalized Health Tips */}
        <div className="card">
          <h2 className="text-lg font-semibold mb-3">üí° L·ªùi khuy√™n s·ª©c kh·ªèe c√° nh√¢n</h2>
          <div className="space-y-3">
            {/* Risk-based recommendations */}
            {currentRisk?.level === 'Kh·∫©n c·∫•p' && (
              <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center gap-2 text-red-700 font-semibold mb-2">
                  üö® C·∫£nh b√°o: Huy·∫øt √°p r·∫•t cao
                </div>
                <div className="text-sm text-red-600">
                  H√£y li√™n h·ªá b√°c sƒ© ngay l·∫≠p t·ª©c ho·∫∑c ƒë·∫øn c∆° s·ªü y t·∫ø g·∫ßn nh·∫•t.
                </div>
              </div>
            )}
            
            {currentRisk?.level === 'Cao' && (
              <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                <div className="flex items-center gap-2 text-orange-700 font-semibold mb-2">
                  ‚ö†Ô∏è Huy·∫øt √°p cao
                </div>
                <div className="text-sm text-orange-600">
                  N√™n ki·ªÉm tra v·ªõi b√°c sƒ© v√† theo d√µi ch·∫∑t ch·∫Ω huy·∫øt √°p.
                </div>
              </div>
            )}

            {/* General recommendations */}
            <div className="space-y-2 text-sm text-gray-700">
              <div className="flex items-start gap-2">
                <span className="text-blue-500">‚Ä¢</span>
                <span>ƒêo huy·∫øt √°p ƒë·ªÅu ƒë·∫∑n v√†o c√πng m·ªôt th·ªùi ƒëi·ªÉm m·ªói ng√†y</span>
              </div>
              <div className="flex items-start gap-2">
                <span className="text-blue-500">‚Ä¢</span>
                <span>Ngh·ªâ ng∆°i 5 ph√∫t tr∆∞·ªõc khi ƒëo</span>
              </div>
              <div className="flex items-start gap-2">
                <span className="text-blue-500">‚Ä¢</span>
                <span>Tr√°nh caffeine v√† ho·∫°t ƒë·ªông m·∫°nh tr∆∞·ªõc khi ƒëo</span>
              </div>
              <div className="flex items-start gap-2">
                <span className="text-blue-500">‚Ä¢</span>
                <span>Ng·ªìi th·∫≥ng, ch√¢n ch·∫°m ƒë·∫•t khi ƒëo</span>
              </div>
              {last7Days.length < 3 && (
                <div className="flex items-start gap-2">
                  <span className="text-orange-500">‚Ä¢</span>
                  <span className="text-orange-600">H√£y ƒëo huy·∫øt √°p th∆∞·ªùng xuy√™n h∆°n ƒë·ªÉ c√≥ ƒë√°nh gi√° ch√≠nh x√°c</span>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}