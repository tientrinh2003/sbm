import asyncio
import json
import os
from bleak import BleakClient, BleakError
from datetime import datetime
import logging

# --- C·∫§U H√åNH ---
CONFIG_FILE = "device_config.json"
DEFAULT_DEVICE_ADDRESS = "00:5F:BF:3A:51:BD"
RECONNECT_DELAY_SECONDS = 5
BLOOD_PRESSURE_MEASUREMENT_UUID = "00002a35-0000-1000-8000-00805f9b34fb"


def load_device_config():
    """ƒê·ªçc c·∫•u h√¨nh device t·ª´ file JSON"""
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
                device_address = config.get('device_address', DEFAULT_DEVICE_ADDRESS)
                device_name = config.get('device_name', 'Unknown Device')
                print(f"‚úÖ Loaded device from config: {device_name} ({device_address})")
                return device_address, device_name
    except Exception as e:
        print(f"‚ùå Error loading config: {e}")
    
    print(f"üîß Using default device address: {DEFAULT_DEVICE_ADDRESS}")
    return DEFAULT_DEVICE_ADDRESS, "Default Device"


def save_device_config(device_address, device_name):
    """L∆∞u c·∫•u h√¨nh device v√†o file JSON"""
    try:
        config = {
            'device_address': device_address,
            'device_name': device_name,
            'updated_at': datetime.now().isoformat()
        }
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=2)
        print(f"üíæ Saved device config: {device_name} ({device_address})")
        return True
    except Exception as e:
        print(f"‚ùå Error saving config: {e}")
        return False


# ƒê·ªçc device address t·ª´ config
DEVICE_ADDRESS, DEVICE_NAME = load_device_config()


def parse_blood_pressure_data(sender: int, data: bytearray):
    """
    Ph√¢n t√≠ch d·ªØ li·ªáu BLE nh·∫≠n ƒë∆∞·ª£c t·ª´ m√°y ƒëo huy·∫øt √°p.
    ƒê·ªãnh d·∫°ng chu·∫©n: Flags(1), SYS(2), DIA(2), MAP(2), Timestamp(7), Pulse(2)
    """
    print("\n" + "=" * 40)
    print(f"[{datetime.now().strftime('%H:%M:%S')}] D·ªÆ LI·ªÜU M·ªöI NH·∫¨N:")
    print(f"  - D·ªØ li·ªáu th√¥ (hex): {data.hex(' ')}")

    try:
        # C·ªù (Flags) ·ªü byte ƒë·∫ßu ti√™n cho bi·∫øt c√°c tr∆∞·ªùng d·ªØ li·ªáu n√†o c√≥ m·∫∑t
        flags = data[0]
        unit_is_kpa = flags & 0x01
        has_timestamp = flags & 0x02
        has_pulse_rate = flags & 0x04

        # C√°c gi√° tr·ªã huy·∫øt √°p lu√¥n c√≥ (SFloat)
        # SFloat l√† m·ªôt ƒë·ªãnh d·∫°ng s·ªë th·ª±c 16-bit ƒë·∫∑c bi·ªát, nh∆∞ng ·ªü ƒë√¢y ch√∫ng ta ƒë·ªçc n√≥ nh∆∞ s·ªë nguy√™n
        sys_val = int.from_bytes(data[1:3], "little")
        dia_val = int.from_bytes(data[3:5], "little")
        map_val = int.from_bytes(data[5:7], "little")

        unit = "kPa" if unit_is_kpa else "mmHg"

        print(f"  - Huy·∫øt √°p t√¢m thu (SYS): {sys_val} {unit}")
        print(f"  - Huy·∫øt √°p t√¢m tr∆∞∆°ng (DIA): {dia_val} {unit}")
        print(f"  - Huy·∫øt √°p trung b√¨nh (MAP): {map_val} {unit}")

        # Con tr·ªè ƒë·ªÉ ƒë·ªçc c√°c tr∆∞·ªùng d·ªØ li·ªáu ti·∫øp theo
        idx = 7

        if has_timestamp:
            year = int.from_bytes(data[idx:idx + 2], "little")
            month, day, hour, minute, second = data[idx + 2:idx + 7]
            timestamp = f"{year}-{month:02d}-{day:02d} {hour:02d}:{minute:02d}:{second:02d}"
            print(f"  - Th·ªùi gian ƒëo: {timestamp}")
            idx += 7

        if has_pulse_rate:
            # Nh·ªãp tim l√† d·∫°ng SFloat, ƒë·ªçc nh∆∞ s·ªë nguy√™n l√† ƒë·ªß cho m·ª•c ƒë√≠ch hi·ªÉn th·ªã
            pulse = int.from_bytes(data[idx:idx + 2], "little")
            print(f"  - Nh·ªãp tim: {pulse} bpm")
            idx += 2

        # TODO: G·ª≠i d·ªØ li·ªáu l√™n server qua HTTP API
        measurement_data = {
            "sys": sys_val,
            "dia": dia_val,
            "pulse": pulse if has_pulse_rate else None,
            "timestamp": timestamp if has_timestamp else datetime.now().isoformat(),
            "method": "BLUETOOTH"
        }
        
        # C√≥ th·ªÉ g·ª≠i l√™n server ·ªü ƒë√¢y
        print(f"üìä Measurement data: {json.dumps(measurement_data, indent=2)}")

    except IndexError:
        logging.error(f"[L·ªói Parser] D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c qu√° ng·∫Øn: {data.hex(' ')}")
    except Exception as e:
        logging.error(f"[L·ªói Parser] L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

    print("=" * 40)


async def live_mode(address: str):
    """
    V√≤ng l·∫∑p ch√≠nh: k·∫øt n·ªëi, nh·∫≠n d·ªØ li·ªáu v√† t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i khi m·∫•t k·∫øt n·ªëi.
    """
    print("--- CH∆Ø∆†NG TR√åNH THEO D√ïI HUY·∫æT √ÅP QUA BLUETOOTH ---")
    print(f"üçì Ch·∫°y tr√™n Raspberry Pi. Nh·∫•n Ctrl+C ƒë·ªÉ tho√°t.")
    print(f"üéØ Target device: {DEVICE_NAME} ({address})")
    print(f"üìÅ Config file: {CONFIG_FILE}")
    print()

    while True:
        # Ki·ªÉm tra xem c√≥ config m·ªõi kh√¥ng
        current_address, current_name = load_device_config()
        if current_address != address:
            print(f"üîÑ Device address changed to: {current_name} ({current_address})")
            address = current_address
        
        client = BleakClient(address)
        try:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ƒêang qu√©t v√† k·∫øt n·ªëi t·ªõi {address}...")
            await client.connect(timeout=20.0)

            if client.is_connected:
                print(f"[TH√ÄNH C√îNG] ƒê√£ k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã. ƒêang ch·ªù d·ªØ li·ªáu...")

                # B·∫Øt ƒë·∫ßu nh·∫≠n th√¥ng b√°o (notifications) t·ª´ m√°y ƒëo huy·∫øt √°p
                await client.start_notify(BLOOD_PRESSURE_MEASUREMENT_UUID, parse_blood_pressure_data)

                # Gi·ªØ cho ch∆∞∆°ng tr√¨nh ch·∫°y v√† l·∫Øng nghe khi ƒëang k·∫øt n·ªëi
                while client.is_connected:
                    await asyncio.sleep(1)
                    
                    # Ki·ªÉm tra config thay ƒë·ªïi m·ªói gi√¢y
                    new_address, new_name = load_device_config()
                    if new_address != address:
                        print(f"üîÑ Config changed! Disconnecting from current device...")
                        break

        except (BleakError, asyncio.TimeoutError) as e:
            print(f"[L·ªñI K·∫æT N·ªêI] Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c m·∫•t k·∫øt n·ªëi: {e}")
        except Exception as e:
            print(f"[L·ªñI H·ªÜ TH·ªêNG] ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")
        finally:
            # D·ªçn d·∫πp tr∆∞·ªõc khi th·ª≠ l·∫°i
            if client and client.is_connected:
                try:
                    await client.stop_notify(BLOOD_PRESSURE_MEASUREMENT_UUID)
                except BleakError:
                    pass # B·ªè qua l·ªói n·∫øu kh√¥ng th·ªÉ d·ª´ng notify (v√≠ d·ª•: thi·∫øt b·ªã ƒë√£ ng·∫Øt k·∫øt n·ªëi ƒë·ªôt ng·ªôt)
                await client.disconnect()
                print("ƒê√£ ng·∫Øt k·∫øt n·ªëi an to√†n.")

            print(f"S·∫Ω th·ª≠ k·∫øt n·ªëi l·∫°i sau {RECONNECT_DELAY_SECONDS} gi√¢y...\n")
            await asyncio.sleep(RECONNECT_DELAY_SECONDS)


if __name__ == "__main__":
    # C·∫•u h√¨nh logging ƒë·ªÉ ghi l·∫°i l·ªói
    logging.basicConfig(level=logging.INFO)
    
    try:
        # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p b·∫•t ƒë·ªìng b·ªô
        asyncio.run(live_mode(DEVICE_ADDRESS))
    except KeyboardInterrupt:
        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n Ctrl+C
        print("\nƒê√£ nh·∫≠n t√≠n hi·ªáu d·ª´ng. ƒêang tho√°t ch∆∞∆°ng tr√¨nh...")
